//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;

public class CortexLib : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CortexLib(global::System.IntPtr cPtr, bool cMemoryOwn) {
    UnityEngine.Debug.Log("qqqq CortexLib constructor called");
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CortexLib obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CortexLib obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CortexLib() {
    UnityEngine.Debug.Log("qqqq CortexLib destructor called");
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EmotivCortexLibPINVOKE.delete_CortexLib(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static void start(CortexStartedEventHandler handler)
  {
    // try
    // {
    //   UnityEngine.Debug.Log("qqqq CortexLib start called");
    //   EmotivCortexLibPINVOKE.CortexLib_start(CortexStartedEventHandler.getCPtr(handler));
    //   UnityEngine.Debug.Log("qqqq CortexLib started successfully");
    // }
    // catch (DllNotFoundException ex)
    // {
    //   throw new System.InvalidOperationException("qqqqqq Failed to load the required native library (.dylib). Make sure the EmotivCortexLib dylib is present and accessible.", ex);
    // }
    
    try {
      // EmotivCortexLibPINVOKE.CortexLib_start(new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero));
      UnityEngine.Debug.Log("qqqq CortexLib start called");
      EmotivCortexLibPINVOKE.CortexLib_start(CortexStartedEventHandler.getCPtr(handler));
      UnityEngine.Debug.Log("EmotivCortexLib.dylib loaded and function called.");
    } catch (DllNotFoundException e) {
        UnityEngine.Debug.Log("EmotivCortexLib.dylib NOT loaded: " + e.Message);
    } catch (EntryPointNotFoundException e) {
        UnityEngine.Debug.Log("Function not found in EmotivCortexLib.dylib: " + e.Message);
    } catch (Exception e) {
        UnityEngine.Debug.Log("Other error: " + e.Message);
    }


  }

  public static void stop() {
    EmotivCortexLibPINVOKE.CortexLib_stop();
  }

  public static void setLogHandler(int logLevel, CortexLogEventHandler handler) {
    EmotivCortexLibPINVOKE.CortexLib_setLogHandler(logLevel, CortexLogEventHandler.getCPtr(handler));
  }

  public CortexLib() : this(EmotivCortexLibPINVOKE.new_CortexLib(), true)
  {
    UnityEngine.Debug.Log("qqqq CortexLib instance created");
  }

}
